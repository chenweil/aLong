<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gulp on aLong blog</title>
    <link>http://localhost:1313/aLong/tags/gulp/</link>
    <description>Recent content in Gulp on aLong blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Apr 2019 18:08:54 +0000</lastBuildDate><atom:link href="http://localhost:1313/aLong/tags/gulp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>gulp笔记</title>
      <link>http://localhost:1313/aLong/posts/gulp%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 22 Apr 2019 18:08:54 +0000</pubDate>
      
      <guid>http://localhost:1313/aLong/posts/gulp%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;h3 id=&#34;gulp&#34;&gt;gulp&lt;/h3&gt;
&lt;p&gt;gulp.js是一个前端构建工具。&lt;/p&gt;
&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;npm&lt;/li&gt;
&lt;li&gt;安装全局gulp，&lt;code&gt;npm install -g gulp&lt;/code&gt;。（如果没有梯子，最好安装下cnpm）
cnpm 安装 &lt;code&gt;npm install -g cnpm --registry=https://registry.npm.taobao.org&lt;/code&gt;
安装完cnpm，下面所有npm操作替换cnpm 执行即可。&lt;/li&gt;
&lt;li&gt;进入项目，初始化（npm init）&lt;/li&gt;
&lt;li&gt;项目安装gulp，项目文件夹下，&lt;code&gt;npm install --save-dev gulp&lt;/code&gt;。 (&amp;ndash;save-dev 加入此项目依赖中，不需要可取消这个参数)&lt;/li&gt;
&lt;li&gt;项目根创建gulpfile.js文件，文件内创建任务测试。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var gulp = require(&amp;#39;gulp&amp;#39;);
gulp.task(&amp;#39;default&amp;#39;,function(){
    console.log(&amp;#39;hello world!&amp;#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;运行 &lt;code&gt;gulp&lt;/code&gt;，可以看到默认执行，输出 hello world! 。测试成功。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;gulp-api&#34;&gt;gulp API&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;上面运行 gulp 执行default ，这个是gulp API。 [文档](https://www.gulpjs.com.cn/docs/api/) 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;gulp工作方式&#34;&gt;gulp工作方式&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;gulp.src&lt;/code&gt; 获取文件流,通过&lt;code&gt;pipe&lt;/code&gt;方法导入到插件，插件处理的流通过&lt;code&gt;pipe&lt;/code&gt;方法导入 &lt;code&gt;gulp.dest&lt;/code&gt;中, &lt;code&gt;gulp.dest&lt;/code&gt; 输出目标文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;gulp src
&lt;code&gt;gulp.src(globs[, options])&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输出（Emits）符合所提供的匹配模式（glob）或者匹配模式的数组（array of globs）的文件。 将返回一个 Vinyl files 的 stream 它可以被 piped 到别的插件中。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;文档这意思看着有点费劲，理解为获取文件路径。gulp通过这个方法获取到处理的文件流。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
