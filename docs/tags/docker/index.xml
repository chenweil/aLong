<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on aLong blog</title>
    <link>https://blog.51ai.vip/aLong/tags/docker/</link>
    <description>Recent content in Docker on aLong blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 May 2020 11:03:48 +0000</lastBuildDate><atom:link href="https://blog.51ai.vip/aLong/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux重启后Docker设置自动启动&amp;容器自动启动设置</title>
      <link>https://blog.51ai.vip/aLong/posts/linux%E9%87%8D%E5%90%AF%E5%90%8Edocker%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8-%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Mon, 18 May 2020 11:03:48 +0000</pubDate>
      
      <guid>https://blog.51ai.vip/aLong/posts/linux%E9%87%8D%E5%90%AF%E5%90%8Edocker%E8%AE%BE%E7%BD%AE%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8-%E5%AE%B9%E5%99%A8%E8%87%AA%E5%8A%A8%E5%90%AF%E5%8A%A8%E8%AE%BE%E7%BD%AE/</guid>
      <description>Linux系统重启后Docker自动启动 系统重启后，如果docker没有启动，那么docker下所有的服务就都挂了。 配置过一次总是忘记命令，这里特意记录一下： systemctl enable docker.service
容器自动启动配置 容器配置好自动启动后，当docker运行后，容器也自动启动。这样能保证服务的稳定性。不用再登录到系统来操作各种容易启动问题。 涉及到的参数为： --restart=always
参数有：
  no，默认策略，在容器退出时不重启容器
  on-failure，在容器非正常退出时（退出状态非0），才会重启容器。例如：on-failure:3，在容器非正常退出时重启容器，最多重启3次
  always，在容器退出时总是重启容器
  unless-stopped，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器
  容器已存在更新重启配置 可能容器我们已经生成了，后面想实现always这个参数，可以用到下面的命令： docker container update --restart=always 容器名XXX 这样就达到了想要的目的。</description>
    </item>
    
    <item>
      <title>Laradock安装与使用</title>
      <link>https://blog.51ai.vip/aLong/posts/laradock%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 15 Aug 2019 10:01:03 +0000</pubDate>
      
      <guid>https://blog.51ai.vip/aLong/posts/laradock%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</guid>
      <description>Laradock 安装与使用 官网
GitHub: https://github.com/laradock/laradock
要求   Git Docker &amp;gt;= 17.12   项目的位置  已有项目情况: git submodule add https://github.com/Laradock/laradock.git 克隆到项目根目录.  结构 :
  project-a    laradock-a project-b  laradock-b    没有项目情况: git clone https://github.com/laradock/laradock.git 克隆后,在同级部署项目.     laradock project-x project-y  启动环境 clone下来还没有生成.
进入laradock目录,编辑Web服务器站点配置. cp env-exalpme .env 环境是laradock环境,里面可以对相应的版本,配置进行修改. 例如指定mysql版本为5.7 ,vim .env ,搜索到mysql部分, 修改MYSQL_VERSION=5.7.26 保存退出.(这里还没生成容器前可以统一配置好需要的环境,再生成容器.)
例如我们需要启动环境需要 mysql,redis,nginx.
执行 docker-compose up -d nginx mysql redis</description>
    </item>
    
    <item>
      <title>Docker常用命令</title>
      <link>https://blog.51ai.vip/aLong/posts/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Thu, 11 Apr 2019 15:09:19 +0000</pubDate>
      
      <guid>https://blog.51ai.vip/aLong/posts/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>Docker常用命令 说常用不如说自己用到的命令。
容器相关 学习了一下docker，基础常用命令记录下。 ####docker run/新建并启动容器 这个run其实包含两个不走，先执行新建容器(docker create),接着启动容器(docker start)。敲两个是不是有点麻烦吧。
docker run xx [COMMAND]
例子 docker run -it ubuntu:14.04 /bin/bash
这里希望启动一个基于 ubuntu 14.04镜像 来创建一个容器，-t选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上，-i则让容器的标准输入保持打开。更多的命令选项可以通过man docker-run命令来查看。之后命令还有一项，启动一个bash终端。 这条命令涉及到很多知识了。 -参数 常用 -i -d -t -p， -d 是否在后台运行，-p 映射到本地主机端口。剩下的看手册来补下。
docker create &amp;amp;&amp;amp; docker start &amp;amp;&amp;amp; docker stop 创建，启动，停止。 有一个容易停止了，可以用 docker start XX容器 启动。 XX 可以是容器的ID，也可以是name。
docker rm 删除一个容器（最好先把这个容器停止了再删除）。 -f 可以强制删除。-v 删除与容器关联的卷（如果刚学习还真不知道什么是卷）。
docker attach 进入容器，如果开启了一个 -d 后台启动容器。 我们怎么进去看看？ docker attach XX容器 这个命令我学习时候用过，感觉有时候不太好使。命令执行完卡那不动。
docker exec 可以在容器内直接执行任意命令。 docker exec -it xx /bin/bash 这可以进入xx镜像，并打开bash。 相比这个比上面的attach 好多了。</description>
    </item>
    
    <item>
      <title>Ubutun下安装Docker</title>
      <link>https://blog.51ai.vip/aLong/posts/ubutun%E4%B8%8B%E5%AE%89%E8%A3%85docker/</link>
      <pubDate>Thu, 04 Apr 2019 14:57:16 +0000</pubDate>
      
      <guid>https://blog.51ai.vip/aLong/posts/ubutun%E4%B8%8B%E5%AE%89%E8%A3%85docker/</guid>
      <description>Docker简介  一个能够把开发的应用程序自动部署到容器的开源引擎 三大概念：镜像（Image）容器（Container）仓库（Repository）
 具体信息请参考官方。官方概述（养成看文档习惯）
安装环境 Ubuntu 16.04 LTS
Docker安装 根据官方doc安装。官方doc 1.如果你之前装过，命令卸载。 sudo apt-get remove docker docker-engine docker.io containerd runc
2.更新包索引 apt-get update
3.安装包以允许apt通过HTTPS使用存储库: sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg-agent \ software-properties-common （斜线换行，一条命令）
4.添加Docker的官方GPG密钥: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - sudo apt-key fingerprint 0EBFCD88
5.使用以下命令设置稳定存储库。要添加 夜间或测试存储库，请在下面的命令中的单词后添加单词nightly或test（或两者）stable。 $ sudo add-apt-repository \ &amp;quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) \ stable&amp;quot; (lsb_release -cs子命令返回Ubuntu发行版的名称)
6.安装最新版本的Docker CE和containerd，或者转到下一步安装特定版本： sudo apt-get install docker-ce docker-ce-cli containerd.</description>
    </item>
    
  </channel>
</rss>
